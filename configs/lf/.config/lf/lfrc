# SETTINGS

# interpreter for shell commands
set shell sh
set hidden true
set shellopts '-eu'
set icons
set previewer ~/.scripts/lf_preview.sh
set ifs "\n"
# leave some space at the top and the bottom of the screen
set scrolloff 10
# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"
# jump to the current match at each keystroke while typing
set incsearch true
# end when there is only a single match
set findlen 0

# COMMANDS

cmd open $rifle $fx

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv --backup=t $fx ~/.trash

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -i -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd bulkrename ${{
    if [ -n "$fs" ]; then
        ~/.scripts/vimv $(basename -a -- $fx)
    else
        ~/.scripts/vimv
    fi

    lf -remote "send $id load"
    lf -remote "send $id unselect"
}}

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip -d "${f%.*}" "$f";;
        *.rar) unrar x "$f" "${f%.*}/";;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd on-select &{{
	if [ "$lf_user_find" = true ]; then
		lf -remote "send $id set user_find false"
		lf -remote "send $id open"
	fi
}}
# MAPPINGS

# use enter for shell commands
map <enter> shell

# map x to cut
map x cut
map <esc> : clear; unselect
# show the result of execution of previous commands
map ` !true
map a :push %~/.scripts/mk.sh<space>
map zz extract
map gl follow_link
map R bulkrename
map d trash
map f :find; set user_find true
