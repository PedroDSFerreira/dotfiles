# SETTINGS

# set drawbox true
set shell sh
set hidden true
set shellopts '-eu'
set icons
set ratios 1:3:4
set previewer ~/.scripts/lf_preview.sh
set ifs "\n"
# leave some space at the top and the bottom of the screen
set scrolloff 10
# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"
# jump to the current match at each keystroke while typing
set incsearch true

# COMMANDS

cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# move current file or selected files to trash folder
# WARNING: (create ~/.trash symlink to your trash folder)
# TODO: use trash-cli
cmd trash %set -f; mv --backup=t $fx ~/.trash

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -i -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd bulkrename ${{
    if [ -n "$fs" ]; then
        ~/.scripts/vimv $(basename -a -- $fx)
    else
        ~/.scripts/vimv
    fi

    lf -remote "send $id load"
    lf -remote "send $id unselect"
}}

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}

# extract the current file with unarchiver
cmd extract ${{
    set -f
    unar $f
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd on-select &{{
	if [ "$lf_user_find" = true ]; then
		lf -remote "send $id set user_find false"
		lf -remote "send $id open"
	fi
}}

cmd goto_oldpwd &{{
    lf -remote "send $id cd ${OLDPWD}"
}}

cmd file_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
}}

cmd fzf_jump ${{
    res="$(find . | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}

cmd find_folder ${{
        # Find all folders except .git/
        # If command doesn't work, use:
        # find ${PWD} --type d -E '*/\.git/*' -H
        lf -remote "send $id cd \"$(find ${PWD} -type d -not -path '*/\.git/*' | fzf)\""
}}

# MAPPINGS

map d
map t
map f
map F
map w
map '"'
map H
map L

map J low
map K high

# Open directory in terminal
map o $$SHELL
# use enter for shell commands
map <enter> shell
# map x to cut
map x cut
map <esc> : clear; unselect
# show the result of execution of previous commands
map "'" !true
map a :push %~/.scripts/mk.sh<space>
map zz extract

map gl follow_link
# go to cmd directory
map gb goto_oldpwd
map gw cd ~/desktop/workspace/
map gd cd ~/downloads/
map gc cd ~/.dotfiles/configs/

map R bulkrename
map dd trash
map dD $rm -rf $fx
map P file_preview

map fa :fzf_jump
map ff find_folder

map S :fzf_jump
